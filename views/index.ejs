<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/stylesheets/style.css">
    <script src="https://cdn.tailwindcss.com"></script>    
    <title>Document</title>
</head>
<body class=" bg-cyan-600 flex items-center justify-center relative">
    <div class="chatpannel bg-white rounded-md w-fit p-4 ">
            <label for="username" class="text-2xl">name:</label>
            <input type="text" id="username" autocomplete="off" class="border-2 " name="username" required>
            <button class=" startbtn bg-blue-600 px-3 py-1 rounded-md text-white" type="submit">Start</button>
    </div>
    <div class="chatRoom h-[80%] w-[70%] rounded-md bg-white overflow-hidden relative shadow-cyan-800 shadow-xl hidden">
        <div class="chatRoom-inner flex relative h-full w-full">
            <div class="profile h-full w-[25%] bg-cyan-700 flex flex-col items-center p-4">
                <div class="image h-[10vw] w-[10vw] bg-gray-400 rounded-full"></div>
                <h2 class="user text-white text-xl mt-4">user name</h2>
            </div>
            <div class="chat w-[75%] h-full bg-gray-200 relative flex flex-col">
                <div class="nav w-full h-14 bg-white p-2 flex justify-between">
                    <h1 class="text-2xl text-left capitalize">Chat Room</h1>
                    <h1>someone is typing...</h1>

                    <div id="user-list" class="bg-white p-4 rounded-md shadow-lg text-center">
                        <h2 class="text-sm font-bold ">Users Online (<span id="user-count" class="cursor-pointer">0</span>)</h2>
                        <ul id="usernames" class=" bg-white px-6">
                            <!-- Usernames will be dynamically inserted here -->
                        </ul>
                    </div>

                </div>
                <div id="messages" class="messages flex-grow overflow-y-auto p-4 space-y-2 custom-scrollbar">
                    
                </div>
                <form id="chat-form" class="chat-form flex p-2 gap-2">
                    <input type="text" id="message-input" class="flex-grow p-2 border border-gray-300 rounded-l" placeholder="Type your message..." autocomplete="off" required>
                    <button type="submit" class="bg-blue-500 text-white p-2 rounded">Send</button>
                </form>
            </div>
        </div>
        
    </div>

    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js" integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO" crossorigin="anonymous"></script>
    <script>

        
            let username ="";
            document.querySelector(".startbtn").addEventListener("click",function(){
            username = document.querySelector("#username").value;
             if(username.trim().length>0){
                document.querySelector(".chatpannel").classList.add("hidden");
                document.querySelector(".chatRoom").classList.remove("hidden");
                document.querySelector(".chatRoom h2").textContent = username;
             }
             else alert("Please enter a valid username!");



             document.getElementById('user-count').addEventListener('click', function() {
    const userList = document.getElementById('user-list');
    const usernames = document.getElementById('usernames');
    
    // Toggle the visibility of the usernames list
    if (usernames.classList.contains('hidden')) {
        usernames.classList.remove('hidden');
        console.log(usernames.classList);
    } else {
        usernames.classList.add('hidden');
        console.log(usernames.classList);
    }
});

            const socket =io();
            socket.emit("new user",username);

            

           // Assume 'users' is an array of objects with 'id' and 'username' properties
socket.on('user-list', function(users) {
    const userCount = document.getElementById('user-count');
    const usernamesList = document.getElementById('usernames');
    // Update user count
    userCount.textContent = users.length;

    usernamesList.innerHTML = '';

// Populate the list with usernames
users.forEach(user => {
    const li = document.createElement('li');
    li.textContent = user.newuser;
    li.className = 'text-blue-500 hover:text-blue-700'; // Add styling for clickable effect
    li.dataset.userId = user.id; // Store the user ID in a data attribute
    // Append to the list

   
    usernamesList.appendChild(li);
});


});


// Listen for the updated user list 
    // socket.on('user-list', function(users) {
    // console.log('Online users:', users);
    // });


            const form = document.getElementById('chat-form');
            const input = document.getElementById('message-input');
            const messages = document.getElementById('messages');



    form.addEventListener('submit', function(e) {
        e.preventDefault();
        if (input.value) {
            socket.emit('chat message', input.value); 
            input.value = ''; 
        }
    });

    socket.on('chat message', function(data) {
    const messages = document.getElementById('messages');
    const msgDiv = document.createElement('div'); // Create a new div for the message

    // Check if the message is from the current user or another user
    if (socket.id === data.userId) {
        // Message from the current user (sender)
        msgDiv.className = 'msg ml-auto w-fit bg-blue-500 text-white px-2 py-1 rounded-md';
        msgDiv.innerHTML = `<span class="user font-bold">You: </span>${data.message}`;

    } else {
        // Message from another user (receiver)
        msgDiv.className = 'msg self-start w-fit bg-gray-300 text-black px-2 py-1 rounded-md';
        msgDiv.innerHTML = `<span class="user font-bold">${data.username}: </span>${data.message}`;

    }

    // Append the message to the chat container
    messages.appendChild(msgDiv);
    messages.scrollTop = messages.scrollHeight; // Auto-scroll to the latest message
    
});

    

        })

    </script>
</body>
</html>