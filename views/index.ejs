<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/stylesheets/style.css">
    <script src="https://cdn.tailwindcss.com"></script>    
    <title>Document</title>
</head>
<body class=" bg-cyan-600 flex items-center justify-center relative">
    <div class="chatpannel bg-white rounded-md w-fit p-4">
        <form id="startChat">
            <label for="username" class="text-xl sm:text-2xl">name:</label>
            <input type="text" id="username" autocomplete="off" class="border-2 " name="username" required>

            <button class=" startbtn bg-blue-600 px-3 py-1 rounded-md text-xl text-white w-full mt-2" type="submit">Start</button>
        </form>
        <button class="privateChat p-2 bg-gray-100 text-xl text-blue-500 w-full border-2 mt-2 hover:bg-blue-500 hover:text-white">One-on-One Chat</button>

    </div>
    <div class="chatRoom fixed inset-0 h-full w-full bg-white rounded-md shadow-xl overflow-hidden hidden">
                <div class="chatRoom-inner flex flex-col h-full">
            
            <!-- <div class="chat w-full md:w-[75%] h-full bg-gray-200 relative flex flex-col"> -->
                <div class="nav h-14 bg-white p-3 flex justify-between items-center border-b border-gray-300">
                    <h1 class="text-[4vw] sm:text-[2vw] sm:font-bold text-left capitalize">Chat Room</h1>
            <h1 id="typing" class="hidden"><span id="typer">someone</span> is typing...</h1>
            <button class="video bg-blue-500 text-white capitalize rounded text-xl py-1 px-3 hidden ">video call</button>
            <div id="user-list" class="relative bg-white p-2 rounded-md shadow-lg flex flex-col gap-4 ">
                <h2 class="text-xs md:text-sm font-bold text-center cursor-pointer">Users Online (<span id="user-count">0</span>)</h2>
                <ul id="usernames" class="mt-2 hidden absolute top-full right-0 px-4 text-center bg-white border border-gray-300 rounded-md shadow-lg">
                </ul>
            </div>
            
        </div>
        <div id="messages" class="flex-grow overflow-y-auto p-2 md:p-4 space-y-2 custom-scrollbar">
            <!-- Chat messages will appear here -->
            <p id="no-users-text" class="text-center text-gray-500 text-2xl ">Nobody is here to chat with...</p>

        </div>
        <form id="chat-form" class="flex p-2 gap-2 bg-gray-100 border-t border-gray-300">
            <input type="text" id="message-input" class="flex-grow p-2 border border-gray-300 rounded-l" placeholder="Type your message..." autocomplete="off" required>
            <button type="submit" class="bg-blue-500 text-white p-2 rounded">Send</button>
        </form>
    </div>
    </div>
    

    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js" integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO" crossorigin="anonymous"></script>
<script>
  const username = document.querySelector("#username");
  const startBtn = document.querySelector("#startChat");
  const privateChat = document.querySelector(".privateChat");
  const onlineUsers = document.querySelector("#user-list");
  const videoCall = document.querySelector(".video");
  const onlineuserList = document.querySelector("#user-list h2");
  const userCount = document.getElementById("user-count");
  const usernames = document.getElementById("usernames");
  const messages = document.getElementById("messages");
  const no_user = document.getElementById("no-users-text");
  const input = document.getElementById("message-input");
  const form = document.getElementById("chat-form");
  const typing = document.getElementById("typing");
  const typer = document.getElementById("typer");

  let socket; // Define the socket at a higher scope
  let typingTimeout;
  let room;


//   socket=io();
  privateChat.addEventListener("click",async function () {
    if (username.value.trim().length > 0) {
      document.querySelector(".chatpannel").classList.add("hidden");
      document.querySelector(".chatRoom").classList.remove("hidden");
      onlineUsers.classList.add("hidden");
      videoCall.classList.remove("hidden");

      // Initialize the socket connection
      socket = io(); // Create socket connection

      socket.emit("joinRoom", username.value);

      try {
            // Wait for the room to be joined
            room = await joinRoomAsync(socket);
            no_user.classList.add("hidden");

            // Call the handlers after the room is set
            typeMessageHandler(socket, room);
            messageHandler(socket, room);
        } catch (error) {
            console.error("Error joining room:", error);
        }
    } else {
        alert("Please enter a valid username!");
    }
});

// Function that returns a Promise for the "room joined" event
function joinRoomAsync(socket) {
    return new Promise((resolve, reject) => {
        // Listen for the "room joined" event
        socket.on("room joined", function (roomName) {
            if (roomName) {
                resolve(roomName); // Resolve the promise with the room name
            } else {
                reject("Failed to join room"); // Reject the promise if no room name
            }
        });
    });
}

   
startBtn.addEventListener("submit", async function (e) {
  e.preventDefault();

  if (username.value.trim().length > 0) {
    // Hide the start panel and show the chat room
    document.querySelector(".chatpannel").classList.add("hidden");
    document.querySelector(".chatRoom").classList.remove("hidden");

    // Create a new socket connection
    socket = io();

    // Emit to join the public room
    socket.emit("public-room", username.value);

    try {
      // Wait for the room to be joined and user list to be updated
      room = await joinpublicRoomAsync(socket);

      // Initialize message and typing handlers with the resolved room name
      typeMessageHandler(socket, room);
      messageHandler(socket, room);
       
    } catch (error) {
      console.error("Error joining room:", error);
    }

    // Add a click event listener for the user list toggle
    onlineuserList.addEventListener("click", function () {
      usernames.classList.toggle("hidden");
    });

  } else {
    alert("Please enter a valid username!");
  }
});

// Function that returns a Promise for the "user-list" event
function joinpublicRoomAsync(socket) {
  return new Promise((resolve, reject) => {
    // Listen for the "user-list" event for global chat
    socket.on("user-list", function (data) {
      const users = data.users;
      const roomName = data.room; // Extract the room name from the data

      // Update the number of online users
      userCount.textContent = users.length;

      usernames.innerHTML = ""; // Clear the current user list

      // Show or hide the "no users" text based on the user count
      if (users.length <= 1) {
        no_user.classList.remove("hidden");
      } else {
        no_user.classList.add("hidden");
      }

      // Populate the user list
      users.forEach((user) => {
        const li = document.createElement("li");
        li.textContent = user.name;
        li.className = "text-blue-500 hover:text-blue-700 h-auto";
        li.dataset.userId = user.id;
        usernames.appendChild(li);
      });

      // Resolve the promise with the room name
      if(roomName) {
        resolve(roomName);
      }else{
        reject("Failed to join room");
      }
    });
  });
}


  function typeMessageHandler(socket, room) {
    input.addEventListener("input", () => {
        // console.log(room)
      socket.emit("typing", { user: username.value, room: room });

      clearTimeout(typingTimeout);
      typingTimeout = setTimeout(() => {
        socket.emit("stop typing", { user: username.value, room: room });
      }, 1000);
    });

    socket.on("typing", (data) => {
      typer.textContent = `${data.username}`;
      typing.classList.remove("hidden");
    });

    socket.on("stop typing", () => {
      typing.classList.add("hidden");
    });
  }

  function messageHandler(socket, roomName) {

    form.addEventListener("submit", function (e) {

      e.preventDefault();
      if (input.value.trim()) {
        // console.log(roomName)
        socket.emit("chat message", { room: roomName, msg: input.value.trim(), username: username.value });
        input.value = "";

        
      }

  

    });

 
    socket.on("message", function (data) {
      const msgDiv = document.createElement("div");
    // console.log(data)
      if (socket.id === data.userId) {
        msgDiv.className = "msg ml-auto w-fit bg-blue-500 text-white px-2 py-1 rounded-md";
        msgDiv.innerHTML = `<span class="user font-bold">You: </span>${data.msg}`;
      } else {
        msgDiv.className = "msg self-start w-fit bg-gray-300 text-black px-2 py-1 rounded-md";
        msgDiv.innerHTML = `<span class="user font-bold">${data.username}: </span>${data.msg}`;
      }

      messages.appendChild(msgDiv);
      messages.scrollTop = messages.scrollHeight;
    }); 
       
  }

</script>

</body>
</html>